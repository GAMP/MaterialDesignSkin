using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Threading;
using System.Windows.Data;
using System.Windows.Markup;
using System.IO;
using System.Xml;

namespace BindingExtensions.DelayBinding
{
    public class DelayBindingController : Freezable
    {
        #region Dependency Properties

        public static DependencyProperty SourcePropertyMirrorProperty =
            DependencyProperty.Register("SourcePropertyMirror",
                                        typeof(object),
                                        typeof(DelayBindingController),
                                        new FrameworkPropertyMetadata(null, OnSourcePropertyMirrorChanged));
        // This DependencyProperty is only used because
        // StringFormat requires a DependencyProperty of type string to work
        public static DependencyProperty StringSourcePropertyMirrorProperty =
            DependencyProperty.Register("StringSourcePropertyMirror",
                                        typeof(string),
                                        typeof(DelayBindingController),
                                        new FrameworkPropertyMetadata(null, OnSourcePropertyMirrorChanged));

        public static DependencyProperty TargetPropertyMirrorProperty =
            DependencyProperty.Register("TargetPropertyMirror",
                                        typeof(object),
                                        typeof(DelayBindingController),
                                        new FrameworkPropertyMetadata(null, OnTargetPropertyMirrorChanged));

        private static void OnSourcePropertyMirrorChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            DelayBindingController delayBindingController = sender as DelayBindingController;
            delayBindingController.SourcePropertyValueChanged();
        }

        private static void OnTargetPropertyMirrorChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            DelayBindingController delayBindingController = sender as DelayBindingController;
            delayBindingController.TargetPropertyValueChanged();
        }

        #endregion // Dependency Properties

        #region Fields

        private readonly DispatcherTimer m_updateTargetTimer;
        private readonly DispatcherTimer m_updateSourceTimer;
        private bool m_delayTarget = false;
        private bool m_delaySource = false;
        private bool m_stringFormatFix = false;
        private bool m_updatingSourceValue = false;
        private bool m_updatingTargetValue = false;

        #endregion // Fields

        #region Constructor

        public DelayBindingController() { }

        public DelayBindingController(DependencyObject targetObject, DependencyProperty targetProperty,
                                      TimeSpan updateSourceDelay, TimeSpan updateTargetDelay,
                                      BindingBase binding, BindingMode mode)
        {
            TargetObject = targetObject;
            TargetProperty = targetProperty;
            if (mode == BindingMode.TwoWay || mode == BindingMode.OneWayToSource)
            {
                m_delaySource = true;
                m_updateSourceTimer = new DispatcherTimer();
                m_updateSourceTimer.Tick += UpdateSourceTimer_Tick;
                m_updateSourceTimer.Interval = updateSourceDelay;
            }

            if (mode != BindingMode.OneWayToSource)
            {
                m_delayTarget = true;
                m_updateTargetTimer = new DispatcherTimer();
                m_updateTargetTimer.Tick += UpdateTargetTimer_Tick;
                m_updateTargetTimer.Interval = updateTargetDelay;
            }

            Binding = binding;
        }

        #endregion // Constructor

        #region Properties

        public DependencyObject TargetObject
        {
            get;
            private set;
        }
        public DependencyProperty TargetProperty
        {
            get;
            private set;
        }
        
        public object SourcePropertyMirror
        {
            get { return GetValue(SourcePropertyMirrorProperty); }
            set { SetValue(SourcePropertyMirrorProperty, value); }
        }
        public string StringSourcePropertyMirror
        {
            get { return (string)GetValue(StringSourcePropertyMirrorProperty); }
            set { SetValue(StringSourcePropertyMirrorProperty, value); }
        }
        public object TargetPropertyMirror
        {
            get { return GetValue(TargetPropertyMirrorProperty); }
            set { SetValue(TargetPropertyMirrorProperty, value); }
        }

        public BindingBase Binding
        {
            get;
            set;
        }

        #endregion // Properties

        #region Public Methods

        public void SetupBindingListeners()
        {
            if (TargetObject == null)
            {
                return;
            }

            Binding targetBinding = new Binding()
            {
                Source = TargetObject,
                Path = new PropertyPath(TargetProperty),
                Mode = BindingMode.TwoWay
            };
            BindingOperations.SetBinding(this, TargetPropertyMirrorProperty, targetBinding);

            if (TargetProperty.PropertyType == typeof(string))
            {
                m_stringFormatFix = true;
                BindingOperations.SetBinding(this, StringSourcePropertyMirrorProperty, Binding);
            }
            else
            {
                BindingOperations.SetBinding(this, SourcePropertyMirrorProperty, Binding);
            }
        }

        public void ClearBinding()
        {
            BindingOperations.ClearBinding(this, TargetPropertyMirrorProperty);
            if (TargetProperty.PropertyType == typeof(string))
            {
                BindingOperations.ClearBinding(this, StringSourcePropertyMirrorProperty);
            }
            else
            {
                BindingOperations.ClearBinding(this, SourcePropertyMirrorProperty);
            }
        }

        #endregion // Public Methods

        #region Private Methods

        private void SourcePropertyValueChanged()
        {
            if (m_delayTarget == true && m_updatingTargetValue == false)
            {
                if (m_updateSourceTimer != null)
                {
                    m_updateSourceTimer.Stop();
                }
                m_updateTargetTimer.Stop();
                m_updateTargetTimer.Start();
            }
        }

        private void TargetPropertyValueChanged()
        {
            if (m_delaySource == true && m_updatingSourceValue == false)
            {
                if (m_updateTargetTimer != null)
                {
                    m_updateTargetTimer.Stop();
                }
                m_updateSourceTimer.Stop();
                m_updateSourceTimer.Start();
            }
        }

        private void UpdateSourceTimer_Tick(object sender, EventArgs e)
        {
            m_updateSourceTimer.Stop();
            UpdateSourceValue();
        }

        private void UpdateTargetTimer_Tick(object sender, EventArgs e)
        {
            m_updateTargetTimer.Stop();
            UpdateTargetValue();
        }

        private void UpdateSourceValue()
        {
            object targetValue = GetValue(TargetPropertyMirrorProperty);
            if (targetValue != GetSourcePropertyMirrorValue())
            {
                m_updatingSourceValue = true;
                SetSourcePropertyMirrorValue(targetValue);
                m_updatingSourceValue = false;
            }
        }

        private void UpdateTargetValue()
        {
            object sourceValue = GetSourcePropertyMirrorValue();
            if (sourceValue != GetValue(TargetPropertyMirrorProperty))
            {
                m_updatingTargetValue = true;
                this.SetValue(TargetPropertyMirrorProperty, sourceValue);
                m_updatingTargetValue = false;
            }
        }

        private object GetSourcePropertyMirrorValue()
        {
            if (m_stringFormatFix == true)
            {
                return GetValue(StringSourcePropertyMirrorProperty);
            }
            return GetValue(SourcePropertyMirrorProperty);
        }

        private void SetSourcePropertyMirrorValue(object targetValue)
        {
            if (m_stringFormatFix == true)
            {
                SetValue(StringSourcePropertyMirrorProperty, targetValue);
                BindingExpressionBase bindingExpressionBase =
                    BindingOperations.GetBindingExpressionBase(this, StringSourcePropertyMirrorProperty);
                if (bindingExpressionBase != null)
                {
                    bindingExpressionBase.UpdateSource();
                }
            }
            else
            {
                SetValue(SourcePropertyMirrorProperty, targetValue);
                BindingExpressionBase bindingExpressionBase =
                    BindingOperations.GetBindingExpressionBase(this, SourcePropertyMirrorProperty);
                if (bindingExpressionBase != null)
                {
                    bindingExpressionBase.UpdateSource();
                }
            }
        }

        #endregion // Private Methods

        protected override Freezable CreateInstanceCore()
        {
            return new DelayBindingController();
        }
    }
}
